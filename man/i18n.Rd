% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/i18n.R
\name{i18n}
\alias{i18n}
\alias{i_}
\alias{ui_}
\title{Translate text}
\usage{
i_(str, lang = NULL, i18n = NULL, markdown = FALSE, keys = c("name", "label"))

ui_(string, lang = NULL)
}
\arguments{
\item{str}{A string, vector or list to be translated.}

\item{lang}{Code for the language that the original language should be
translated into.}

\item{i18n}{List of language configurations, can only be set for \code{i_}.
Options that can be set are:

\code{defaultLang} Default language used in Shiny app; default = "en"

\code{availableLangs} Language that can be chosen for translation in Shiny app;
there are currently 15 \strong{Available languages} (see below); defaults to
all.

\code{localeDir} Directory to \code{yaml} or \code{csv} file(s) which contain custom
keyword translations; default = "locale"

\code{fallbacks} List of fallback languages if translation for a word is not
found in desired language; defaults to \strong{Default fallbacks} (see below)

\code{queryParameter} String to define query parameter if language to be set
through URL; default = "lang"

\code{customTranslationSource} String to change the type of source for custom
translations. Options: "yaml" and "csv"; default = "yaml". If "csv"
there needs to be a "translations.csv" in the \code{localeDir} with an "id"
column and columns for languages (e.g. "en", "es", ...)}

\item{markdown}{Transform markdown text to HTML, can only be set for \code{i_};
default = FALSE}

\item{keys}{If \code{str} is a list this is a string (or a vector of strings)
specifying which key(s) of the list to translate; can only be set for \code{i_}.}
}
\value{
Translation of input text in the same format as the input.
}
\description{
Translate strings, vectors or lists in the Server of a Shiny app. There are
currently 15 languages available for translation (see \strong{Available languages}
below). Note that the \code{i_} function should be used within the Server of the
app and the \code{ui_} function should be used in the UI.
}
\section{Available languages}{
 There are currently 15 languages available for
translation:\tabular{ll}{
   code \tab language \cr
   ar \tab Arabic \cr
   ca \tab Catalan \cr
   da \tab Danish \cr
   de \tab German \cr
   en \tab English \cr
   es \tab Spanish \cr
   fr \tab French \cr
   he \tab Hebrew \cr
   hi \tab Hindi \cr
   it \tab Italian \cr
   pt \tab Portuguese \cr
   pt_BR \tab Portuguese (Brazil) \cr
   ru \tab Russian \cr
   sv \tab Swedish \cr
   zh_CN \tab Chinese \cr
}
}

\section{Default fallbacks}{
 If no fallback languages are specified,
translations automatically fall back onto the following languages.\tabular{ll}{
   original language \tab fallback language \cr
   es \tab pt \cr
   pt \tab es \cr
   fr \tab pt \cr
   de \tab nl \cr
   nl \tab de \cr
}
}

\examples{
i_("hello", lang = "de")

i_(c("hello", "world"), lang = "es")

i_(list(id = "hello", translate = "world"), lang = "pt", keys = "translate")

\dontrun{
ui <- fluidPage(
useShi18ny(),
langSelectorInput("lang", position = "fixed"),
)
}
}
